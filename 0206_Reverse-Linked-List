#include<iostream>
using namespace std;

struct ListNode
{
    int m_Value;
    ListNode* m_pNext;

    ListNode() :m_Value(0), m_pNext(nullptr) {}
    ListNode(int val) :m_Value(val), m_pNext(nullptr) {}
    ListNode(int val, ListNode* next) :m_Value(val), m_pNext(next) {}
};


class Solution 
{
public:
    ListNode* reverseList(ListNode* pHead) 
    {
        // extreme cases
        if (!pHead)
            return nullptr;
        if (!pHead->m_pNext)
            return pHead;

        ListNode* pPre = nullptr;
        ListNode* pCur = pHead;
        ListNode* pNext = pCur->m_pNext;

        while (pNext)
        {
            pCur->m_pNext = pPre;
            pPre = pCur;
            pCur = pNext;
            pNext = pNext->m_pNext;
        }
        pCur->m_pNext = pPre;
        return pCur;
    }
};


void travelList(ListNode* pHead)
{
    ListNode* p = pHead;
    while (p)
    {
        cout << p->m_Value << " ";
        p = p->m_pNext;
    }
}



int main()
{
    ListNode nd1(1);
    ListNode nd2(2);
    ListNode nd3(3);
    ListNode nd4(4);
    ListNode nd5(5);
    ListNode nd6(6);
    ListNode nd7(7);
    ListNode nd8(8);
    ListNode nd9(9);
    ListNode nd10(10);

    nd1.m_pNext = &nd2;
    nd2.m_pNext = &nd3;
    nd3.m_pNext = &nd4;
    nd4.m_pNext = &nd5;
    nd5.m_pNext = &nd6;
    nd6.m_pNext = &nd7;
    nd7.m_pNext = &nd8;
    nd8.m_pNext = &nd9;
    nd9.m_pNext = &nd10;

    Solution solve;
    auto pReversedHead = solve.reverseList(&nd1);
    travelList(pReversedHead);

    return 0;
}




NOTES:
为了保证反转单链表的过程中不丢失节点，需要使用三个指针。
1. pCur指向当前操作的节点
2. pPre指向pCur的前一个节点
3. PNext指向pCur的后一个节点
如果不使用pNext，将pCur的m_pNext指向pPre之后，后面的节点就丢失了。必须用pNext把后面的节点记录下来。
