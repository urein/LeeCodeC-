#include<iostream>
#include<vector>
using namespace std;

struct ListNode
{
	int m_Value;
	ListNode* m_pNext;
    
    ListNode() :m_Value(0), m_pNext(nullptr) {}
    ListNode(int val) :m_Value(val), m_pNext(nullptr) {}
    ListNode(int val, ListNode* next) :m_Value(val), m_pNext(next) {}
};


class Solution
{
public:
    ListNode* removeNthFromTail(ListNode* pHead, unsigned n)
    {
        ListNode* pAhead = pHead;
        ListNode* pBehind = pHead;

        for (unsigned i = 0; i != n; ++i)
            pAhead = pAhead->m_pNext;

        while (pAhead->m_pNext != nullptr)
        {
            pAhead = pAhead->m_pNext;
            pBehind = pBehind->m_pNext;
        }
        ListNode* pDel = pBehind->m_pNext;
        pBehind->m_pNext = pDel->m_pNext;
        pDel->m_pNext = nullptr;

        return pHead;
    }
};

void travelList(ListNode* pHead)
{
    ListNode* p = pHead;
    while (p)
    {
        cout << p->m_Value << " ";
        p = p->m_pNext;
    }
}



int main()
{
    ListNode nd1(1);
    ListNode nd2(2);
    ListNode nd3(3);
    ListNode nd4(4);
    ListNode nd5(5);
    ListNode nd6(6);
    ListNode nd7(7);
    ListNode nd8(8);
    ListNode nd9(9);
    ListNode nd10(10);

    nd1.m_pNext = &nd2;
    nd2.m_pNext = &nd3;
    nd3.m_pNext = &nd4;
    nd4.m_pNext = &nd5;
    nd5.m_pNext = &nd6;
    nd6.m_pNext = &nd7;
    nd7.m_pNext = &nd8;
    nd8.m_pNext = &nd9;
    nd9.m_pNext = &nd10;
	
    Solution solve;
    ListNode* newHead = solve.removeNthFromTail(&nd1, 4);

    travelList(newHead);
 
    return 0;
}
