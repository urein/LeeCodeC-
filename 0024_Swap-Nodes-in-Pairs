#include<iostream>
using namespace std;


struct ListNode
{
    int m_Value;
    ListNode* m_pNext;

    ListNode() :m_Value(0), m_pNext(nullptr) {}
    ListNode(int val) :m_Value(val), m_pNext(nullptr) {}
    ListNode(int val, ListNode* next) :m_Value(val), m_pNext(next) {}
};


class Solution 
{
public:
    ListNode* swapPairs(ListNode* pHead) 
    {
        if (!pHead)
            return nullptr;

        ListNode* pDummy = new ListNode(-1);
        ListNode* pPre = pDummy;
        pPre->m_pNext = pHead;
        ListNode* pNd1 = pHead;
        ListNode* pNd2 = pHead->m_pNext;
        ListNode* pNext = nullptr;

        while (pNd1)
        {
            if (pNd2)
                pNext = pNd2->m_pNext;
            else
                break;
            
            pPre->m_pNext = pNd2;
            pNd2->m_pNext = pNd1;
            pNd1->m_pNext = pNext;

            pPre = pPre->m_pNext->m_pNext;
            pNd1 = pNd1->m_pNext;
            if (pNd1)
                pNd2 = pNd1->m_pNext;
        }
        
        ListNode* pRet = pDummy->m_pNext;
        delete(pDummy);
        return pRet;
    }
};

void travelList(ListNode* pHead)
{
    ListNode* p = pHead;
    while (p)
    {
        cout << p->m_Value << " ";
        p = p->m_pNext;
    }
}


int main()
{
    ListNode nd1(1);
    ListNode nd2(2);
    ListNode nd3(3);
    ListNode nd4(4);
    ListNode nd5(5);
    ListNode nd6(6);

    nd1.m_pNext = &nd2;
    nd2.m_pNext = &nd3;
    nd3.m_pNext = &nd4;
    nd4.m_pNext = &nd5;
    nd5.m_pNext = &nd6;

    Solution solve;
    auto pr = solve.swapPairs(&nd1);
    travelList(pr);
    
    return 0;
}



NOTES：

因为第一个节点就要交换，因此必须添加虚拟节点pDummy。
pNd1和pNd2分别指向两个待交换的节点。
pPre指向pNd1之前，pNext指向pNd2之后
