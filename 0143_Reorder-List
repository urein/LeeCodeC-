#include<iostream>
using namespace std;


struct ListNode
{
    int m_Value;
    ListNode* m_pNext;

    ListNode() :m_Value(0), m_pNext(nullptr) {}
    ListNode(int val) :m_Value(val), m_pNext(nullptr) {}
    ListNode(int val, ListNode* next) :m_Value(val), m_pNext(next) {}
};


class Solution 
{
public:
    void reorderList(ListNode* pHead)
    {
        if (!pHead || !pHead->m_pNext)
            return;

        ListNode* pHead1 = pHead;  // head of the first half
        ListNode* pHead2 = getMiddleNode(pHead);  // head of the second half
        pHead2 = reverseList(pHead2);  // head of the reversed second half

        ListNode* pCur1 = pHead1;
        ListNode* pCur2 = pHead2;

        while (pCur2->m_pNext)
        {
            ListNode* pTmp1 = pCur1->m_pNext;
            pCur1->m_pNext = pCur2;
            pCur1 = pTmp1;
            ListNode* pTmp2 = pCur2->m_pNext;
            pCur2->m_pNext = pTmp1;
            pCur2 = pTmp2;
        }
    }
    ListNode* getMiddleNode(ListNode* pHead)
    {
        ListNode* pSlow = pHead;
        ListNode* pFast = pHead;

        while (pFast && pFast->m_pNext)
        {
            pSlow = pSlow->m_pNext;
            pFast = pFast->m_pNext->m_pNext;
        }
        return pSlow;
    }
    ListNode* reverseList(ListNode* pHead)
    {
        ListNode* pPre = nullptr;
        ListNode* pCur = pHead;
        ListNode* pNext = pHead->m_pNext;

        while (pNext)
        {
            pCur->m_pNext = pPre;
            pPre = pCur;
            pCur = pNext;
            pNext = pNext->m_pNext;
        }
        pCur->m_pNext = pPre;
        
        return pCur;
    }

};


void travelList(ListNode* pHead)
{
    ListNode* p = pHead;
    while (p)
    {
        cout << p->m_Value << " ";
        p = p->m_pNext;
    }
}


int main()
{
    Solution solve;

    ListNode nd1(1);
    ListNode nd2(2);
    ListNode nd3(3);
    ListNode nd4(4);
    ListNode nd5(5);
    ListNode nd6(6);
    ListNode nd7(7);

    nd1.m_pNext = &nd2;
    nd2.m_pNext = &nd3;
    nd3.m_pNext = &nd4;
    nd4.m_pNext = &nd5;
    nd5.m_pNext = &nd6;
    nd6.m_pNext = &nd7;

    solve.reorderList(&nd1);
    travelList(&nd1);

	return 0;
}


NOTES:

s1: 找到链表的中间节点，见题目876
s2: 对后半部分链表进行反转，见题目206
s3: 将前后两部分子链表依次拼接
