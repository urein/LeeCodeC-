#include<iostream>
using namespace std;


struct ListNode
{
    int m_Value;
    ListNode* m_pNext;

    ListNode() :m_Value(0), m_pNext(nullptr) {}
    ListNode(int val) :m_Value(val), m_pNext(nullptr) {}
    ListNode(int val, ListNode* next) :m_Value(val), m_pNext(next) {}
};


class Solution 
{
public:
    ListNode* partition(ListNode* pHead, int x) 
    {
        ListNode* pL = new ListNode(-1);  // dummy: less
        ListNode* pGE = new ListNode(-1);  // dummy: greater equal
        ListNode* pLe = pL;  // end of linked list started by pL
        ListNode* pGEe = pGE;  // end of linked list started by pGE

        ListNode* cur = pHead;
        while (cur)
        {
            if (cur->m_Value < x)
            {
                pLe->m_pNext = cur;
                pLe = pLe->m_pNext;
            }
            else
            {
                pGEe->m_pNext = cur;
                pGEe = pGEe->m_pNext;
            }
            cur = cur->m_pNext;
        }

        pLe->m_pNext = pGE->m_pNext;
        delete pGE;
        pGEe->m_pNext = nullptr;
        ListNode* pRet = pL->m_pNext;
        delete pL;

        return pRet;

    }
};


void travelList(ListNode* pHead)
{
    ListNode* p = pHead;
    while (p)
    {
        cout << p->m_Value << " ";
        p = p->m_pNext;
    }
}

int main()
{
    ListNode nd1(1);
    ListNode nd2(4);
    ListNode nd3(3);
    ListNode nd4(2);
    ListNode nd5(5);
    ListNode nd6(2);

    nd1.m_pNext = &nd2;
    nd2.m_pNext = &nd3;
    nd3.m_pNext = &nd4;
    nd4.m_pNext = &nd5;
    nd5.m_pNext = &nd6;

    //ListNode nd1(2);
    //ListNode nd2(1);
    //nd1.m_pNext = &nd2;

    Solution solve;
    auto pr = solve.partition(&nd1, 3);
    travelList(pr);
    
    return 0;
}



NOTES:

将大于等于/小于的节点分别拼接在创建的两个虚拟头节点上，然后将两个拼接后的子链表连接在一起得到结果。最后删除两个虚拟节点即可。
两个虚拟节点必须是new出来的，而不能将两个虚拟节点初始化为空指针，否则它们没有m_pNext成员，无法操作。
